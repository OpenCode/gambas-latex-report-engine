' Gambas class file

' -----------------------------------------------------------------------------
'
'  LATEX REPORT ENGINE
'  
'  Copyright(c) 2014 Francesco OpenCode Apruzzese All Rights Reserved.
'  www.e-ware.org
'  opencode@e-ware.org
'
'  This program Is Free software: you can redistribute it And / Or modify
'  it under the terms Of the GNU Affero General Public License As Published
'  by the Free Software Foundation, either version 3 Of the License, Or
'  (at your option)any later version.
'
'  This program Is Distributed In the hope that it will be useful,
'  but WITHOUT ANY WARRANTY; without even the implied warranty Of
'  MERCHANTABILITY Or FITNESS For A PARTICULAR PURPOSE.See the
'  GNU Affero General Public License For more details.
'
'  You should have received a Copy Of the GNU Affero General Public License
'  along With this program. If Not ,see <http:/www.gnu.org/licenses>
'
' -----------------------------------------------------------------------------

' ---------
' VARIABLES
' ---------

' ----- Report datas
Private report_name As String
Private report_path As String

' ----- Content datas
Private content As String
Private dateclass_paper As String
Private dataclass_font_size As String
Private dataclass_type As String
Private title_title As String
Private title_author As String
Private title_date As String

' ---------
' CONSTANTS
' ---------

' ----- Report datas
Public Const FormatPdf As String = "pdf"
Public Const FormatDvi As String = "dvi"
Public Const LineBreak As String = "\\newline"
Public Const Today As String = "\\today"
Public Const TableOfContents As String = "\\tableofcontents"
Public Const Latex As String = "\\LaTeX\\"
' ----- Control Datas
Private ValidFormat As String[] = [FormatPdf, FormatDvi]
Private ValidPaper As String[] = ["a0paper", "a1paper", "a2paper", "a3paper", "a4paper", "a5paper", "a6paper", "b0paper", "b1paper", "b2paper", "b3paper", "b4paper", "b5paper", "b6paper", "c0paper", "c1paper", "c2paper", "c3paper", "c4paper", "c5paper", "c6paper", "b0j", "b1j", "b2j", "b3j", "b4j", "b5j", "b6j", "ansiapaper", "ansibpaper", "ansicpaper", "ansidpaper", "ansiepaper", "letterpaper", "executivepaper", "legalpaper"]

' ----- INIT Function for Class
Public Sub _new(name As String, Optional path As String = "/tmp")

    report_name = name
    report_path = path
    content = ""
    dateclass_paper = "a4paper"
    dataclass_font_size = "12pt"
    dataclass_type = "article"
    title_title = ""
    title_author = ""
    title_date = ""

End

' -----------------
' SETTING functions
' -----------------

Public Sub SetReportPath(path As String)

    report_path = path

End

Public Sub SetReportName(name As String)

    report_name = name

End

' -----------------
' GETTING functions
' -----------------

Public Sub GetReportPath() As String
    
    Return report_path
    
End

Public Sub GetReportName() As String
    
    Return report_name
    
End

Public Sub GetContent() As String
    
  Return content  
    
End

' ------------------------
' REPORTING CORE functions
' ------------------------

' -------------------------
' GENERIC Functions
' -------------------------

Private Sub SetContent(text As String)
    
    content = text
    
End

Public Sub ClearContent()

  SetContent("")

End

Public Sub DocumentClass(Optional paper As String = "", Optional font_size As String = "", Optional type As String = "")
    
    If paper And Not ValidPaper.Exist(paper) Then
        Error.Raise(paper & " is not a valid paper")
    Endif
    dateclass_paper = IIf(paper <> "", paper, dateclass_paper)
    dataclass_font_size = IIf(font_size <> "", font_size, dataclass_font_size)
    dataclass_type = IIf(type <> "", type, dataclass_type)
    InsertLatex("\\documentclass[" & dateclass_paper & "," & dataclass_font_size & "]{" & dataclass_type & "}")
    
End

Public Sub Begin()

    InsertLatex("\\begin{document}")  

End

Public Sub SetTitle(Optional title As String, Optional author As String, Optional data As String)

    title_title = IIf(title <> "", title, title_title)
    title_author = IIf(author <> "", author, title_author)
    title_date = IIf(data <> "", data, title_date)
    InsertLatex("\\title{" & title_title & "}")
    InsertLatex("\\author{" & title_author & "}")
    InsertLatex("\\date{" & title_date & "}")
    InsertLatex("\\maketitle")

End

Public Sub End()

    InsertLatex("\\end{document}")

End

' --------------
' TEXT Functions
' --------------

Public Sub InsertText(text As String, Optional newline As Boolean = True)

    content = content & text & gb.NewLine
    If newline == True Then
        content = content & LineBreak & gb.NewLine
    Endif

End

Public Sub InsertLatex(code As String)

    InsertText(code, False)

End

Public Sub IncludeElement(element As Variant)

    ' Include an element created with external engine class
    
    InsertLatex(element.Include())
    
End

' -----------------
' PARSING Functions
' -----------------

Public Sub Parsing(Optional type As String = "pdf")

    Dim report_file As File
    Dim software As String
    Dim parsing_process As Process

    ' ----- Check the format of the report passed as argument
    If type And Not ValidFormat.Exist(type) Then
        Error.Raise("Not defined format for " & type)
    Endif

    ' ----- Create the base report in tex
    report_file = Open report_path &/ report_name & ".tex" For Write Create
    Print #report_file, content
    Close #report_file

    If type = "dvi" Then
        software = "latex"
    Else
        software = "pdflatex"
    Endif

    ' ----- Render the report
    Shell "cd " & report_path & "; " & software & " " & report_path &/ report_name & ".tex" Wait

End
